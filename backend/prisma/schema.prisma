// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.VarChar(36)
  email     String   @unique @db.VarChar(255)
  firstName String   @map("first_name") @db.VarChar(100)
  lastName  String   @map("last_name") @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      Role     @default(USER)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  createdTickets Ticket[] @relation("TicketCreator")
  assignedTickets Ticket[] @relation("TicketAssignee")
  comments       Comment[]

  @@map("users")
}

model Ticket {
  id          String       @id @default(uuid()) @db.VarChar(36)
  title       String       @db.VarChar(255)
  description String       @db.Text
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  createdBy   String       @map("created_by") @db.VarChar(36)
  assignedTo  String?      @map("assigned_to") @db.VarChar(36)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  creator  User      @relation("TicketCreator", fields: [createdBy], references: [id])
  assignee User?     @relation("TicketAssignee", fields: [assignedTo], references: [id])
  comments Comment[]

  @@map("tickets")
}

model Comment {
  id        String   @id @default(uuid()) @db.VarChar(36)
  content   String   @db.Text
  ticketId  String   @map("ticket_id") @db.VarChar(36)
  authorId  String   @map("author_id") @db.VarChar(36)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id])

  @@map("comments")
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}